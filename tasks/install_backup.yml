---
# where backup scripts will be placed
- name: Create backup directories
  file:
    owner: postgres
    group: postgres
    mode: 0750
    state: directory
    path: "{{ item }}"
  with_items:
    - "{{ postgresql_tools_dir }}"
    - "{{ postgresql_tools_dir }}/bin"
    - "{{ postgresql_tools_dir }}/etc"

- name: Create backup output directory
  file:
    owner: postgres
    group: postgres
    mode: 0750
    state: directory
    path: "{{ postgresql_backup_dir }}"
  when: postgresql_backup_dir[0] == '/' and postgresql_create_backup_dir

- name: Install backup script templates
  template:
    src: "{{ item }}.j2"
    dest: "{{ postgresql_tools_dir }}/bin/{{ item }}"
    owner: postgres
    group: postgres
    mode: 0750
  loop:
    - archive_wal.sh
    - pg_backup.sh
    - pg_restore.sh

- name: Install backup script files
  copy:
    src: "{{ item }}"
    dest: "{{ postgresql_tools_dir }}/bin/{{ item }}"
    owner: postgres
    group: postgres
    mode: 0750
  loop:
    - backup.py

# Desactivé car conf WAL non maitrisée, elle produit ces messages d'erreur dans la log du serveur postgresql :
# [...] fichier de configuration « /etc/postgresql/14/main/conf.d/20ansible_backup.conf » contient des erreurs [...]
#- name: Set WAL archive config options
#  template:
#    src: 20ansible_backup.conf.j2
#    dest: "{{ postgresql_conf_dir }}/conf.d/20ansible_backup.conf"
#    owner: postgres
#    group: postgres
#    mode: 0640
#    backup: true
#  notify: Reload PostgreSQL

# TOFIX : n'a pas l'air de fonctionner ..
- name: Schedule backups
  ansible.builtin.cron:
    name: "PostgreSQL Backup"
    cron_file: ansible_postgresql_backup
    user: postgres
    hour: "{{ postgresql_backup_hour | default(1) }}"
    minute: "{{ postgresql_backup_minute | default(0) }}"
    day: "{{ postgresql_backup_day | default(omit) }}"
    month: "{{ postgresql_backup_month | default(omit) }}"
    weekday: "{{ postgresql_backup_weekday | default(omit) }}"
    job: >-
      {{ postgresql_backup_command }}
      {{
        ' && ' ~ postgresql_backup_post_command if postgresql_backup_post_command is defined else ''
      }}

# .. donc mise en place de ce cron pour assurer un dump quotidien
- name: Cron pg_backup.sh
  ansible.builtin.cron:
    name: "Cron pg_backup.sh"
    minute: "45"
    hour: "19"
    user: postgres
    job: "{{ postgresql_tools_dir }}/bin/pg_backup.sh -a >/dev/null"

# TODO: inutile ??
- name: Remove PostgreSQL working WAL backup cron job
  ansible.builtin.cron:
    name: "PostgreSQL WAL Backup"
    cron_file: ansible_postgresql_walbackup
    state: absent

